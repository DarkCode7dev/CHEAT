[HttpGet]
        public IActionResult CompressFiles(string paths)
        {
            var fileNames = paths.Split(',').Select(x => x.Trim()).ToArray();
            if (fileNames.Length == 0)
            {
                return BadRequest("No files were specified");
            }

            var memoryStream = new MemoryStream();
            using (var archive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
            {
                foreach (var fileName in fileNames)
                {
                    var fileInfo = new FileInfo(fileName);
                    if (fileInfo.Exists)
                    {
                        var entryName = Path.GetFileName(fileName);
                        var entry = archive.CreateEntry(entryName);
                        using (var stream = entry.Open())
                        {
                            using (var fileStream = fileInfo.OpenRead())
                            {
                                fileStream.CopyTo(stream);
                            }
                        }
                    }
                }
            }

            memoryStream.Seek(0, SeekOrigin.Begin);
            return File(memoryStream, "application/zip", "files.zip");
        }




==========================
columns: [
        // Define your other columns here
        {
            // Define your custom column
            data: 'zip_files',
            title: 'Zip Files',
            render: function (data, type, full, meta) {
                // Create a link to download the zip folder
                var zipLink = '<a href="path/to/zip/folder" download>Download Zip Folder</a>';
                
                // Return the link if the column is being displayed
                if (type === 'display') {
                    return zipLink;
                }
                
                // Return the raw data for sorting/filtering
                return data;
            }
        }
    ]
